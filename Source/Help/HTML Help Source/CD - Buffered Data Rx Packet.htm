<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!--
Generated by HTML Help Compile Tools. You can modify this directly with the HTML editor of your choice,
or you can open it in Word, edit it, and save it as a .htm or .html file.
-->


<html>
	<head>
		<meta http-equiv="Content-Style-Type" content="text/css">
		<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
		<title>Buffered Receive Packet</title> <!--REPLACE-->
		<link rel="STYLESHEET" type="text/css" href="css/VSsystemexplorer.css">
		<script src="common.js" type="text/javascript"></script><script src="js/expandable_tree.js" type="text/javascript"></script>
		<link rel="STYLESHEET" type="text/css" href="css/expandable_tree.css">
		<script src="launchhelp.js" type="text/javascript"></script><script src="js/dynamicjumps.js" type="text/javascript"></script>
	</head>
	<body>
		<noscript>
			<p class="Body">JavaScript is disabled. <a href="veristandmerge.chm::/JavaScript_Disabled.html">Details</a></p>
			<hr width="100%" noshade>
		</noscript>
		<h1>Buffered Received Packet</h1> <!--REPLACE-->
		<h2>Introduction</h2>
		<p>
			<!--Global scheme of why this screen is important and how it relates to the general process of setting up the custom device.-->
			This page represents a single packet to be received on a UDP port. A packet will have an ID, which represents the relative order in which the packet is expected to arrive in. Unlike a typical <a href="CD - Receive Packet.htm">receive packet</a>, this packet only operates on buffers of data instead of channels.
		</p>
		
		<h2>Configuration Summary</h2>
		<p>
			<!--Description/summary of the basic purpose of the controls on this screen.-->
			A receive packet must be configured with a local NIC and port to send on. Additionally, the packet needs a destination address and port to try to send to. Further configuration can adjust the endianness of the expended inbound packet contents. The size of the buffer must also be defined for this packet. The packet itself will create the buffer at run time. A pointer to the buffer is exposed via the <i>Buffer</i> channel on the first execution of the simulation. Another custom device or model that wants to read data from this buffer must have a channel mapped to the <i>Buffer</i> channel. An invalid buffer will take the value of 0 in the channel.<br><br>
			<table>
				<tr>
					<th></th>
					<th>Description</th>
				</tr>
			<!--
				<tr>
					<td><STRONG>Configure Header</STRONG></td>
					<td>Clicking on this button opens a dialogue that displays the current <a href="INFO - Packet Headers.htm">header payload</a> that will be used for the transmit packet. Header elements may be removed and added as needed, but the <i>Packet Size</i> bytes are required at a minimum for the header.</td>
				</tr>
			-->
				<tr>
					<td><STRONG>Endianness</STRONG></td>
					<td>Determines the byte endianness of the transmitted packet. Supports little-endian and big-endian.</td>
				</tr>
				<tr>
					<td><STRONG>IP Address of Local NIC</STRONG></td>
					<td>IP address of the local network interface card to use to send this packet.</td>
				</tr>
				<tr>
					<td><STRONG>Port</STRONG></td>
					<td>The local port to use to send this packet.</td>
				</tr>
				<tr>
					<td><STRONG>Read Timeout</STRONG></td>
					<td>The number of milliseconds that the packet should wait (at the longest) for any incoming data. When trying to receive data sets smaller than the <i>Buffer Size</i> property, it is suggested to make this property at least as fast as the PCL period.</td>
				</tr>
				<tr>
					<td><STRONG>Multicast IP Address</STRONG></td>
					<td>The Multicast address to subscribe to in the event that inbound traffic is multicast.</td>
				</tr>
				<tr>
					<td><STRONG>Auto-Assign Local NIC</STRONG></td>
					<td>A shortcut functionality that enables the auto-population of the <i>IP Address of Local NIC</i> field. Attempts to use the IP address assigned to controller or realtime host.</td>
				</tr>
				<tr>
					<td><STRONG>Multicast?</STRONG></td>
					<td>Toggles if the UDP receive session expects data over a Multicast address.</td>
				</tr>
				<tr>
					<td><STRONG>Debug Mode</STRONG></td>
					<td>When active, logs verbose error messages to the Veristand console and default Veristand log file. Only errors are logged. Issues with opening duplex connections are current unhandled. Additionally, generates unique log files for the enabled packet. These log files can be found in the custom device directory on the target in the 'UDP_CD_Debug_Logs' directory. The custom device directory varies by target.  The log file creation will be displayed at startup on the console. These log files are unmanaged and should be manually cleaned-up or removed from the target upon completion of debug. Debug logs automatically begin overwriting old records after the file size has exceeded ~24MB. This caps the log file size around 24MB.<br><STRONG>NOTE:</STRONG> Debug mode sacrifices significant performance for thorough logging of errors. This includes receive packet timeouts and other potential error conditions.</td>
				</tr>
				<tr>
					<td><STRONG>New Data Options</STRONG></td>
					<td>Determines how the <i>New Data</i> channel operates during execution.<br><STRONG>Timeout Reset:</STRONG> When a new packet is received, the <i>New Data</i> is set to 1. Upon a UDP timeout, the <i>New Data</i> channel will reset to 0.<br><STRONG>Counter:</STRONG> The <i>New Data</i> channel initializes to 0. When a new packet is received, <i>New Data</i> increments by 1. When a UDP timeout occurs, the channel remains at its previous value.</td>
				</tr>
				<tr>
					<td><STRONG>Buffer Size</STRONG></td>
					<td>The number of bytes that will be allocated for using in the receive buffer. Other models and custom devices reading using this buffer should never use more bytes than what is allocated here.</td>
				</tr>
				<tr>
					<td><STRONG>External Buffer</STRONG></td>
					<td>If active, an external model or custom device is required to provide the buffer that will receive data over UDP. The buffer pointer must be provided via the Buffer channel. If inactive, a buffer will be internally created by this custom device. The buffer will be exposed over the Buffer channel.</td>
				</tr>
				<tr>
					<td><STRONG>Buffer Options</STRONG></td>
					<td>Modifies how the buffer is filled during runtime. <a href="INFO - Receive Circular Buffer Format.htm">Circular Buffer Formatting</a><br><STRONG>Static Buffer:</STRONG> A received packet is always pushed into the buffer at a 0 offset, filling the buffer up to the size of the packet.<br><STRONG>Circular Buffer:</STRONG> A received packet fills the buffer in a circular fashion, appending each received packet to the end of the previously received packet. Automatically handles roll-over events. A roll-over event will never result in a split packet, restarting at the beginning of the buffer if a packet is too large to fit into the remainder of the buffer.<br><STRONG>Circular Buffer + Size:</STRONG> Each payload received has size data stored with it in the buffer. The buffer is handled similarly to the <i>Circular Buffer</i> option.</td>
				</tr>
				<tr>
					<td><STRONG>Pointer Encoding</STRONG></td>
					<td>Determines the encoding of the pointer in the <i>Buffer</i> channel. Conversion Encoding may result in loss of pointer bits in 64-bit systems.<br><STRONG>Direct Encoding:</STRONG> The pointer is cast into the <i>Buffer</i> channel at runtime and will occupy the lower 32 bits of the double value directly.<br><STRONG>Conversion Encoding:</STRONG> The pointer will undergo a floating point conversion and be represented as a floating point value in the <i>Buffer</i> channel.</td>
				</tr>
			</table>
		</p>
		<h2>Channels</h2>
		<p>
			<table>
				<tr>
					<th></th>
					<th>Description</th>
				</tr>
				<tr>
					<td><STRONG>New Data</STRONG></td>
					<td>Changes state when a packet is received. See the <b>New Data Options</b> property configure how this channel will behave during runtime.</td>
				</tr>
				<tr>
					<td><STRONG>Bytes Received</STRONG></td>
					<td>A receive packet always attempts to read, at a maximum, <i>Buffer Size</i> number of bytes. This channel will always reflect the number bytes actually received over the UDP socket.</td>
				</tr>
				<tr>
					<td><STRONG>Buffer</STRONG></td>
					<td>Takes an initial value of 0. On the first execution of the simulation, this channel will be set to a value that represents a pointer to an in-memory buffer. Another custom device or model may map an input channel to this channel to read large collections of data in from the UDP network. The data in the buffer takes no particular format and is application dependent. If an external buffer is being provided, no data will be transmitted out until a non-zero value is present on this channel. See the <b>Pointer Encoding</b> property for more information on how the pointer is encoded in this channel.</td>
				</tr>
				<tr>
					<td><STRONG>Port</STRONG></td>
					<td>Outputs the port that this packet last received data from.</td>
				</tr>
			</table>
		</p>
	</body>
	<footer>
		<a href="CD - Page Summary.htm">Back</a> <!--REPLACE - Should refer to the previous page-->
		<hr>
	</footer>
</html> 
