<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!--
Generated by HTML Help Compile Tools. You can modify this directly with the HTML editor of your choice,
or you can open it in Word, edit it, and save it as a .htm or .html file.
-->


<html>
	<head>
		<meta http-equiv="Content-Style-Type" content="text/css">
		<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
		<title>Receive Ping Pong Buffer Format</title> <!--REPLACE-->
		<link rel="STYLESHEET" type="text/css" href="css/VSsystemexplorer.css">
		<script src="common.js" type="text/javascript"></script><script src="js/expandable_tree.js" type="text/javascript"></script>
		<link rel="STYLESHEET" type="text/css" href="css/expandable_tree.css">
		<script src="launchhelp.js" type="text/javascript"></script><script src="js/dynamicjumps.js" type="text/javascript"></script>
		<style type="text/css">
			th, td{
				border: 1px solid black;
				text-align: center;
			}
		</style>
	</head>
	<body>
		<noscript>
			<p class="Body">JavaScript is disabled. <a href="veristandmerge.chm::/JavaScript_Disabled.html">Details</a></p>
			<hr width="100%" noshade>
		</noscript>
		<h1>Receive Ping Pong Buffer Format</h1> <!--REPLACE-->
		<h2>Introduction</h2>
		<p>
			The Ping Pong options in the <i>Buffer Receive Packet</i> are an another alternative receive buffering solution. The Ping Pong options also allow for lossless receipt of consecutive high-speed packets on a network, but instead uses two buffers for storing data. At the Overflow the Active Buffer, data is then shifted into the secondary buffer, allowing the data present in the primary buffer to remain stable for period of time. This buffer option is suggested for systems where network data is tag-like in nature, where only the latest value of the data is important.<br><br>
			The following terminology is used commonly for this buffering option:<br>
			<ul>
				<li><b>Primary Buffer:</b> This is one of the buffers used by this buffering option. This is generally the buffer present in the <i>Buffer</i> channel.</li>
				<li><b>Secondary Buffer:</b> The other buffer used by this buffering option. This is generally the buffer present in the <i>Buffer_B</i> channel.</li>
				<li><b>Active Buffer:</b> The buffer that is currently being written to. This is also known as the Unstable buffer.</li>
				<li><b>Unstable:</b> The Active Buffer is considered unsable, as the contents of it are presently being updated by the inbound network packets.</li>
				<li><b>Stable:</b> The inActive Buffer is consider stable. Its contents are no longer changing and will remain static until an Overflow even occurs.</li>
				<li><b>Overflow:</b> An event that occurs when adding a new inbound packet would result in data passing the end of the Active Buffer.</li>
				<li><b>Change Buffer:</b> When Overflow occurs, the Active Buffer is changed from the Active Buffer to the Inactive Buffer. If the Active Buffer is presently the Primary Buffer, the Active Buffer is changed to the Secondary Buffer. If the Active Buffer is presently the Secondary Buffer, the Active Buffer is changed to the Primary Buffer.</li>
				<li><b>Flush:</b> An operation that clears the Active Buffer bytes to 0x00. This occurs immediately after changing the Active Buffer.</li>
				<li><b>Reset Buffer:</b> Resets the current packet storage location in the Active Buffer to the beginning. This occurs immediately after a flush.</li>
			</ul>

		</p>
		
		<h2>Ping Pong</h2>
		<p>
			<!--Description/summary of the buffer operation.-->
			The standard Ping Pong option is used to linearly buffer inbound packets, adding packet data to the Active Buffer from start to end. When an Overflow occurs, the Active Buffer is set Inactive and then changed to the other buffer (Change Buffer). After the Active Buffer is changed, the Active Buffer is then flushed and reset, and the next inbound packet data is added. This option is suggested when inbound packets have their own delimiters present.
			<h3>Format: Primary Buffer</h3>
			<table>
				<tr>
					<th>Payload(0)</th>
					<th>Payload(1)</th>
					<th>Payload(n)</th>
					<th>--End of Active Buffer--</th>
					<th>Secondary Buffer Active</th>
				</tr>
				<tr>
					<td>Size(0) Bytes - Untyped</td>
					<td>Size(1) Bytes - Untyped</td>
					<td>Size(n) Bytes - Untyped</td>
					<td>--Flush, Reset, Secondary Buffer--</td>
					<td>(Data Unchanged)</td>
				</tr>
			</table>
			<h3>Format: Secondary Buffer</h3>
			<table>
				<tr>
					<th>Payload(n+1)</th>
					<th>Payload(n+2)</th>
					<th>Payload(m)</th>
					<th>--End of Active Buffer--</th>
					<th>Primary Buffer Active</th>
				</tr>
				<tr>
					<td>Size(n+1) Bytes - Untyped</td>
					<td>Size(n+2) Bytes - Untyped</td>
					<td>Size(m) Bytes - Untyped</td>
					<td>--Flush, Reset, Primary Buffer--</td>
					<td>(Data Unchanged)</td>

				</tr>
			</table>

			<h3>Rules:</h3>
			<ul>
				<li>Buffer_B is always the first Active Buffer.</li>
				<li>Packets always are added to the beginning of the Active Buffer first.</li>
				<li>Packets are always placed adjacent to each other with no special markers or delimiting.</li>
				<li>The Primary and Secondary Buffers are always the same size.</li>
				<li>Checks for Overflow <STRONG>ONLY OCCUR WHEN A NEW PACKET IS RECEIVED.</STRONG> This will result in a phase shift of data.</li>
				<li>On Overflow, the Active Buffer is set inactive first, the Active Buffer is changed, and then the new Active Buffer is flushed.</li>
				<li>The Flush event will always reset the entire contents of the newly Active Buffer to 0x00.</li>
				<li>The inbound packet that triggers the change and flush will be added after the flush occurs.</li>
				<li>Any byte that is not occupied by packet data is always set to 0x00.</li>
				<li>The Inactive Buffer will retain it's current or default value until a Flush takes place.</li>
				<li>The <i>Bytes Received</i> channel will no longer work as intended.</li>
				<li>The <i>Port</i> channel will only display the <STRONG>LATEST</STRONG> sending port.</li>
			</ul>
		</p>
		<h2>Ping Pong + Size</h2>
		<p>
			<!--Description/summary of the buffer operation.-->
			The size Ping Pong option is identical in function to the standard option, however several additional fields and delimiters are present in the buffers to assist with data parsing and buffer traversal. Notably, the first three bytes of the buffers are allocated for static headers, and each packet is pre-empted with a size value. This option is suggested when working with packets that have few meaningful delimiters present.
			<h3>Format: Primary Buffer</h3>
			<table>
				<tr>
					<th>Active Buffer</th>
					<th>Packet Count</th>
					<th>Size(0)</th>
					<th>Payload(0)</th>
					<th>Size(1)</th>
					<th>Payload(1)</th>
					<th>Size(n)</th>
					<th>Payload(n)</th>
					<th>--End of Active Buffer--</th>
					<th>Secondary Buffer Active</th>
				</tr>
				<tr>
					<td>1 Byte - U8 (0xFF)</td>
					<td>2 Bytes - U16</td>
					<td>4 Bytes - I32</td>
					<td>Size(0) Bytes - Untyped</td>
					<td>4 Bytes - I32</td>
					<td>Size(1) Bytes - Untyped</td>
					<td>4 Bytes - I32</td>
					<td>Size(n) Bytes - Untyped</td>
					<td>--Flush, Reset, Secondary Buffer--</td>
					<td>(Data Unchanged)</td>
				</tr>
			</table>
			<h3>Format: Secondary Buffer</h3>
			<table>
				<tr>
					<th>Active Buffer</th>
					<th>Packet Count</th>
					<th>Size(n+1)</th>
					<th>Payload(n+1)</th>
					<th>Size(n+2)</th>
					<th>Payload(n+2)</th>
					<th>Size(m)</th>
					<th>Payload(m)</th>
					<th>--End of Active Buffer--</th>
					<th>Primary Buffer Active</th>
				</tr>
				<tr>
					<td>1 Byte - U8 (0xFF)</td>
					<td>2 Bytes - U16</td>
					<td>4 Bytes - I32</td>
					<td>Size(0) Bytes - Untyped</td>
					<td>4 Bytes - I32</td>
					<td>Size(1) Bytes - Untyped</td>
					<td>4 Bytes - I32</td>
					<td>Size(n) Bytes - Untyped</td>
					<td>--Flush, Reset, Primary Buffer--</td>
					<td>(Data Unchanged)</td>
				</tr>
			</table>

			<h3>Rules:</h3>
			<ul>
				<li>Buffer_B is always the first Active Buffer.</li>
				<li>Packets always are added to the beginning of the Active Buffer first.</li>
				<li>Packets are always placed adjacent to each other, delimited only by the size field of the next packet.</li>
				<li>The <i>Active Buffer</i> byte is always present at byte 0.</li>
				<li>The <i>Active Buffer</i> byte will always be set to 0xFF when the present buffer is active (unstable).</li>
				<li>The <i>Active Buffer</i> byte will always be set to 0x00 when the present buffer becomes inactive (stable).</li>
				<li>The <i>Packet Count</i> field will always be present at the second and third bytes of the buffer.</li>
				<li>The <i>Packet Count</i> field will increment every time a new packet is added to the cache.</li>
				<li>The <i>Packet Count</i> will reset to 0 during a Flush.</li>
				<li>On Overflow, the Active Buffer is set inactive first, the Active Buffer is changed, and then the new Active Buffer is flushed.</li>
				<li>The Flush event will always reset the entire contents of the newly Active Buffer to 0x00.</li>
				<li>The inbound packet that triggers the change and flush will be added after the flush occurs.</li>
				<li>Any byte that is not occupied by packet data is always set to 0x00.</li>
				<li>The Inactive Buffer will retain it's current or default value until a Flush takes place.</li>
				<li>The <i>Bytes Received</i> channel will no longer work as intended.</li>
				<li>The <i>Port</i> channel will only display the <STRONG>LATEST</STRONG> sending port.</li>
			</ul>
		</p>
	</body>
	<footer>
		<a href="CD - Buffered Data Rx Packet.htm">Back</a> <!--REPLACE - Should refer to the previous page-->
		<hr>
	</footer>
</html> 
