<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!--
Generated by HTML Help Compile Tools. You can modify this directly with the HTML editor of your choice,
or you can open it in Word, edit it, and save it as a .htm or .html file.
-->


<html>
	<head>
		<meta http-equiv="Content-Style-Type" content="text/css">
		<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
		<title>Receive Internal Cache Format</title> <!--REPLACE-->
		<link rel="STYLESHEET" type="text/css" href="css/VSsystemexplorer.css">
		<script src="common.js" type="text/javascript"></script><script src="js/expandable_tree.js" type="text/javascript"></script>
		<link rel="STYLESHEET" type="text/css" href="css/expandable_tree.css">
		<script src="launchhelp.js" type="text/javascript"></script><script src="js/dynamicjumps.js" type="text/javascript"></script>
		<style type="text/css">
			th, td{
				border: 1px solid black;
				text-align: center;
			}
		</style>
	</head>
	<body>
		<noscript>
			<p class="Body">JavaScript is disabled. <a href="veristandmerge.chm::/JavaScript_Disabled.html">Details</a></p>
			<hr width="100%" noshade>
		</noscript>
		<h1>Receive Internal Cache Format</h1> <!--REPLACE-->
		<h2>Introduction</h2>
		<p>
			The Internal Cache options in the <i>Buffer Receive Packet</i> are an alternative to the <i>Circular Buffer</i> options. The Internal Cache options also allow for lossless receipt of consecutive high-speed packets on a network, but instead only exposes those packets in bulk. Due to the bulk-transfer characteristics, data in the shared memory is generally more stable. This buffer option is suggested for systems where network data is tag-like in nature, where only the latest value of the data is important.<br><br>
			The following terminology is used commonly for this buffering option:<br>
			<ul>
				<li><b>Internal Cache:</b> A buffer defined internally for a packet that uses one of the Internal Cache options. Often referred to as the cache.</li>
				<li><b>Shared Buffer:</b> The buffer that is exposed to models and other outside operations with a channel.</li>
				<li><b>Flush:</b> An operation that clears the Internal Cache bytes to 0x00.</li>
				<li><b>Copy:</b> An operation that copies the Internal Cache to the Shared Buffer. This also implies that the structures defined below are used by both the Internal Cache and the Shared Buffer.</li>
				<li><b>Overflow:</b> An event that occurs when adding a new inbound packet would result in data passing the end of allocated memory.</li>
				<li><b>Reset Cache:</b> Resets the current packet storage location in the cache back to the beginning. This accounts for headers as applicable.</li>
			</ul>

		</p>
		
		<h2>Internal Cache</h2>
		<p>
			<!--Description/summary of the buffer operation.-->
			The standard Internal Cache option is used to linearly buffer inbound packets, adding packet data to the Internal Cache from start to end. When an Overflow occurs, the cache is copied byte-for-byte to the Shared Buffer. After the cache is copied, the cache is then flushed, and the next inbound packet data is added. This option is suggested when inbound packets have their own delimiters present.
			<h3>Format:</h3>
			<table>
				<tr>
					<th>Payload(0)</th>
					<th>Payload(1)</th>
					<th>Payload(n)</th>
					<th>--End of Buffer Encountered--</th>
					<th>Payload(n+1)</th>
				</tr>
				<tr>
					<td>Size(0) Bytes - Untyped</td>
					<td>Size(1) Bytes - Untyped</td>
					<td>Size(n) Bytes - Untyped</td>
					<td>--Copy, Flush, Reset Cache--</td>
					<td>Size(n+1) Bytes - Untyped</td>
				</tr>
			</table>

			<h3>Rules:</h3>
			<ul>
				<li>Packets always are added to the beginning of the cache first.</li>
				<li>Packets are always placed adjacent to each other with no special markers or delimiting.</li>
				<li>The Internal Cache is always the same size as the Shared Buffer.</li>
				<li>Checks for Overflow <STRONG>ONLY OCCUR WHEN A NEW PACKET IS RECEIVED.</STRONG> This will result in a phase shift of data.</li>
				<li>On Overflow, the Internal Cache is always copied first, and then flushed.</li>
				<li>The Flush event will always reset the entire contents of the Internal Cache to 0x00.</li>
				<li>The inbound packet that triggers the copy and flush will be added after the flush occurs.</li>
				<li>Any byte that is not occupied by packet data is always set to 0x00.</li>
				<li>The Shared Buffer will retain it's current or default value until a Copy takes place.</li>
				<li>The <i>Bytes Received</i> channel will no longer work as intended.</li>
				<li>The <i>Port</i> channel will only display the <STRONG>LATEST</STRONG> sending port.</li>
			</ul>
		</p>
		<h2>Internal Cache + Size</h2>
		<p>
			<!--Description/summary of the buffer operation.-->
			The size Internal Cache option is identical in function to the standard option, however several additional fields and delimiters are present in the Internal Cache to assist with data parsing and buffer traversal. Notably, the first three bytes of the cache are allocated for static headers, and each packet is pre-empted with a size value. This option is suggested when working with packets that have few meaningful delimiters present.
			<h3>Format:</h3>
			<table>
				<tr>
					<th>New Data</th>
					<th>Packet Count</th>
					<th>Size(0)</th>
					<th>Payload(0)</th>
					<th>Size(1)</th>
					<th>Payload(1)</th>
					<th>Size(n)</th>
					<th>Payload(n)</th>
					<th>--End of Buffer Encountered--</th>
					<th>New Data</th>
					<th>Packet Count</th>
					<th>Size(n+1)</th>
					<th>Payload(n+1)</th>
				</tr>
				<tr>
					<td>1 Byte - U8</td>
					<td>2 Bytes - U16</td>
					<td>4 Bytes - I32</td>
					<td>Size(0) Bytes - Untyped</td>
					<td>4 Bytes - I32</td>
					<td>Size(1) Bytes - Untyped</td>
					<td>4 Bytes - I32</td>
					<td>Size(n) Bytes - Untyped</td>
					<td>--Copy, Flush, Reset Cache--</td>
					<td>1 Byte - U8</td>
					<td>2 Bytes - U16</td>
					<td>4 Bytes - I32</td>
					<td>Size(n+1) Bytes - Untyped</td>
				</tr>
			</table>

			<h3>Rules:</h3>
			<ul>
				<li>Packets always are added to the beginning of the cache first.</li>
				<li>Packets are always placed adjacent to each other, delimited only by the size field of the next packet.</li>
				<li>The <i>New Data</i> byte is always present at byte 0.</li>
				<li>The <i>New Data</i> byte will always be set to 0xFF when the cache is copied to the Shared Buffer.</li>
				<li>The <i>Packet Count</i> field will always be present at the second and third bytes of the cache</li>
				<li>The <i>Packet Count</i> field will increment every time a new packet is added to the cache.</li>
				<li>The <i>Packet Count</i> will reset to 0 during a Flush.</li>
				<li>On Overflow, the Internal Cache is always copied first, and then flushed.</li>
				<li>The Flush event will always reset the entire contents of the Internal Cache to 0x00.</li>
				<li>The inbound packet that triggers the copy and flush will be added after the flush occurs.</li>
				<li>Any byte that is not occupied by packet data is always set to 0x00.</li>
				<li>The Shared Buffer will retain it's current or default value until a Copy takes place.</li>
				<li>The <i>Bytes Received</i> channel will no longer work as intended.</li>
				<li>The <i>Port</i> channel will only display the <STRONG>LATEST</STRONG> sending port.</li>
			</ul>
		</p>
	</body>
	<footer>
		<a href="CD - Buffered Data Rx Packet.htm">Back</a> <!--REPLACE - Should refer to the previous page-->
		<hr>
	</footer>
</html> 
